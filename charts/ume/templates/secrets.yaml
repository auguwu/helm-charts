{{/*
# üêª‚Äç‚ùÑÔ∏èüè¥‚Äç‚ò†Ô∏è Noel's Helm Charts: Curated catalog of Noel's Helm charts.: Helm Charts for Noel's software and other software I use on a day to day basis
# Copyright (c) 2024 Noel Towa <cutie@floofy.dev>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
*/}}

{{- if not .Values.config.uploaderKey.secret.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
    name: {{ include "ume.fullname" . }}-uploader-key
    namespace: {{ .Release.Namespace }}
    annotations:
        {{- include "ume.annotations" . | nindent 8 }}
    labels:
        {{- include "ume.labels" . | nindent 8 }}
type: Opaque
data:
    {{ .Values.config.uploaderKey.secret.key }}: {{ include "common.tplvalues.render" (dict "value" .Values.config.uploaderKey.value "context" $) | b64enc | quote }}
{{- end }}
{{- if and (eq .Values.storage.kind "S3") (not .Values.storage.s3.secrets.existingSecret) }}
---
{{- if empty .Values.storage.s3.secrets.accessKeyId }}
    {{ fail "`storage.s3.secrets.accessKeyId` is empty! please set it or set an existing secret to read from via `storage.s3.secrets.existingSecret`" }}
{{- end }}
{{- if empty .Values.storage.s3.secrets.secretAccessKey }}
    {{ fail "`storage.s3.secrets.secretAccessKey` is empty! please set it or set an existing secret to read from via `storage.s3.secrets.existingSecret`" }}
{{- end }}
apiVersion: v1
kind: Secret
metadata:
    name: {{ include "ume.fullname" . }}-aws-secrets
    namespace: {{ .Release.Namespace }}
    annotations:
        {{- include "ume.annotations" . | nindent 8 }}
    labels:
        {{- include "ume.labels" . | nindent 8 }}
type: Opaque
data:
    {{ .Values.storage.s3.secrets.accessKeyIdSecretKey }}: {{ .Values.storage.s3.secrets.accessKeyId | b64enc | quote }}
    {{ .Values.storage.s3.secrets.secretAccessKeySecretKey }}: {{ .Values.storage.s3.secrets.secretAccessKey | b64enc | quote }}
{{- end }}
